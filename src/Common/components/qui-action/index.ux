<import name="qui-overlay" src="../qui-overlay/index"></import>

<template>
  <qui-overlay visible="{{visible}}" background="{{background}}" @qui-overlay-click="overlayClick">
    <div class="{{iosStyle === '1' ?'qui-action-ios':''}}  {{className}}" show="{{show}}">
      <div class="qui-action-content {{ iosStyle === '1' ? 'qui-action-content-ios':''}}">
        <text for="options" class="qui-action-item {{!$idx?'qui-action-item-first':''}}" @click="select($idx)">
          {{$item}}
        </text>
        <text class="qui-action-item qui-action-cancel" if="iosStyle === '1' && cancel" @click="cancelSelect">
          {{cancel}}
        </text>
      </div>
    </div>
  </qui-overlay>
</template>

<style>
  @keyframes quiactionenter {
    0% {
      transform: translateY(100%);
    }
    100% {
      transform: translateY(0%);
    }
  }

  @keyframes quiactionleave {
    0% {
      transform: translateY(0%);
    }
    100% {
      transform: translateY(100%);
    }
  }

  .qui-action-enter {
    animation-name: quiactionenter;
  }

  .qui-action-leave {
    animation-name: quiactionleave;
  }

  .qui-action-ios {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    animation-duration: 600ms;
    animation-fill-mode: forwards;
    flex-direction: column;
  }


  .qui-action-content {
    flex-direction: column;
    width: 984px;
    border-radius: 48px;
    background-color: #ffffff;
  }

  .qui-action-content-ios {
    flex-shrink: 0;
    width: 100%;
    border-radius: 0;
    background-color: #f2f3f5;
  }

  .qui-action-item {
    padding: 0 72px;
    color: #000000;
    font-size: 42px;
    line-height: 156px;
    text-align: center;
    lines: 1;
    text-overflow: ellipsis;
    border-color: #eeeeef;
    border-top-width: 2px;
    background-color: #ffffff;
  }

  .qui-action-item-first {
    border-top-width: 0;
  }

  .qui-action-cancel {
    margin-top: 21px;
    border-top-width: 0;
  }
</style>

<script>
  /**
   * visible: '1'/'0',  //是否显示
   * background: 'rgba(0,0,0,.4)',   //遮罩层背景色
   * iosStyle: '1'/'0',   //是否为ios风格
   * cancel: '取消',    //ios风格时的取消按钮文本，没有则无取消按钮
   * options: ['xx','xxx']  //选项文本
   */
  export default {
    props: {
      visible: {
        type: String,
        default: '0'
      },
      background: {
        type: String,
        default: 'rgba(0,0,0,.4)'
      },
      iosStyle: {
        type: String,
        default: '0'
      },
      cancel: {
        type: String,
        default: '取消'
      },
      options: {
        type: Array,
        default: []
      }
    },
    data() {
      return {
        show: false, //show无法控制fixed后代元素的显隐，故需要单独控制
        className: ''
      }
    },
    onInit() {
      this.$watch('visible', 'updateVisible')
      this.updateVisible()
    },
    updateVisible() {
      if (this.contentTimeoutId) clearTimeout(this.contentTimeoutId)

      if (this.visible === '1') {
        this.show = true
        
        if (this.iosStyle === '1') {
          this.className = 'qui-action-enter'
        }
      } else {
        if (this.iosStyle === '1') {
          this.className = 'qui-action-leave'
        }

        this.contentTimeoutId = setTimeout(() => {
          this.show = false
        }, this.iosStyle === '1' ? 600 : 500)
      }
    },
    overlayClick() {  //用内联写法会有问题，所以用单独的方法来处理事件
      this.$emit('quiOverlayClick')
    },
    select(index) {
      this.$emit('quiSelect', { index })
    },
    cancelSelect() {
      this.$emit('quiCancel')
    }
  }
</script>