<!-- Created by yzhangbao on 18/04/11. -->
<!-- qui-radio -->

<template>
  <div class="qui-radio-box">
    <block for="(index, row) in options">
      <div if="!(index === 0) && replaceHasBorder" class="border-top"></div>
      <div class="item {{replaceIsRight ? 'is-right' : ''}} {{row.disabled ? 'disabled' : ''}}" @click="clickAction(row)">
        <text class="name" if="replaceIsRight" style="font-size: {{labelFontSize}};color: {{labelColor}}">{{row.label || row}}</text>
        <stack class="radio" style="background-color: {{replaceValue === (row.value || row) ? checkedColor : checkColor}};border-color: {{replaceValue === (row.value || row) ? checkedBorderColor : checkBorderColor}}">
          <div class="thumb {{replaceValue === (row.value || row) ? 'open' : 'close'}}" style="background-color: {{replaceValue === (row.value || row) ? thumbCheckedColor : thumbCheckColor}}"></div>
        </stack>
        <text class="name" if="!replaceIsRight" style="margin-left: {{labelMargin}};font-size: {{labelFontSize}};color: {{labelColor}}">{{row.label || row}}</text>
      </div>
    </block>
  </div>
</template>

<style>
  .qui-radio-box {
    flex-direction: column;
    background-color: #ffffff;
  }

  .border-top {
    margin-left: 20px;
    height: 1px;
    background-color: #bbbbbb;
  }

  .item {
    padding: 30px 40px;
  }

  .is-right {
    justify-content: space-between;
  }

  .disabled .radio {
    opacity: .5;
  }

  .radio {
    align-items: center;
    justify-content: center;
    width: 60px;
    height: 60px;
    border-radius: 30px;
    border-width: 4px;
  }

  .thumb {
    width: 36px;
    height: 36px;
    border-radius: 36px;
  }

  @keyframes open {
    from {
      transform: scale(0);
    }
    to {
      transform: scale(1);
    }
  }

  .open {
    animation-name: open;
    animation-duration: 0ms;
    animation-fill-mode: forwards;
  }

  @keyframes close {
    from {
      transform: scale(1);
    }
    to {
      transform: scale(0);
    }
  }

  .close {
    animation-name: close;
    animation-duration: 0ms;
    animation-fill-mode: forwards;
  }
</style>

<script>
  export default {
    props: {
      value: String,
      options: {
        type: Array
      },
      labelMargin: {
        type: String,
        default: '30px'
      },
      labelFontSize: {
        type: String,
        default: '44px'
      },
      labelColor: {
        type: String,
        default: '#000000'
      },
      isRight: {
        type: String,
        default: '0'
      },
      hasBorder: {
        type: String,
        default: '1'
      },
      checkColor: {
        type: String,
        default: '#FFFFFF'
      },
      checkedColor: {
        type: String,
        default: '#FFFFFF'
      },
      checkBorderColor: {
        type: String,
        default: '#CCCCCC'
      },
      checkedBorderColor: {
        type: String,
        default: '#2998F9'
      },
      thumbCheckColor: {
        type: String,
        default: 'transparent'
      },
      thumbCheckedColor: {
        type: String,
        default: '#2998F9'
      },

    },
    data() {
      return {
        replaceIsRight: false,
        replaceHasBorder: true,
        replaceValue: this.value
      }
    },
    onInit() {
      this.initialize()
    },
    onReady() {
      this.$watch('value', 'initialize')
      this.$watch('replaceValue', 'change')
    },
    initialize() {
      this.replaceValue = this.value
      if (this.isRight !== "0") {
        this.replaceIsRight = true
      }
      if (this.hasBorder !== "1") {
        this.replaceHasBorder = false
      }
    },
    clickAction(data) {
      if (typeof data === 'object') {
        if (!data.disabled) {
          this.replaceValue = data.value
        }
      }
      else {
        this.replaceValue = data
      }
    },
    change() {
      this.$emit('quiRadioChange', { values: this.replaceValue })
    }
  }
</script>